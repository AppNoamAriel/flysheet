document.addEventListener('DOMContentLoaded', async () => {
  const username = sessionStorage.getItem("username");
  if (!sessionStorage.getItem("isLoggedIn") || !username) {
    return window.location.href = "/login.html";
  }

  // On r√©cup√®re tous les d√©partements avec leurs coordonn√©es
  const departementCoordsMap = new Map();
  try {
    const res = await fetch('https://geo.api.gouv.fr/departements?fields=code,nom,centre&format=json');
    const departements = await res.json();
    departements.forEach(dep => {
      if (dep.centre?.coordinates) {
        departementCoordsMap.set(dep.code, dep.centre.coordinates); // [lng, lat]
      }
    });
  } catch (e) {
    console.error("Erreur lors du chargement des coordonn√©es des d√©partements", e);
  }

  const addBtn = document.getElementById('addFlysheetBtn');
  const tableBody = document.getElementById('flysheetTableBody');

  const getProgressColor = (progress) => {
    if (progress <= 25) return '#e74c3c';
    if (progress <= 75) return '#f39c12';
    return '#2ecc71';
  };

  const renderFlysheetRow = (flysheet) => {
    const row = document.createElement('tr');
    row.dataset.id = flysheet._id;

    const valides = parseInt(flysheet.valide || 0, 10);
    const objectif = parseInt(flysheet.objectif || 0, 10);
    const progress = objectif > 0 ? Math.min(100, Math.round((valides / objectif) * 100)) : 0;
    const color = getProgressColor(progress);

    row.innerHTML = `
      <td><a href="${flysheet.url}" class="invisible-link" target="_blank">${flysheet.pile ? `${flysheet.typeProduit} (Pile)` : flysheet.nom}</a></td>
      <td class="valides-cell">${flysheet.pile ? '' : (flysheet.valide || 0)}</td>
      <td class="invalides-cell">${flysheet.invalide || 0}</td>
      <td>${flysheet.tel || 0}</td>
      <td>${flysheet.unique || 0}</td>
      <td>${flysheet.installer || 0}</td>
      <td style="max-width: 200px;">${(flysheet.departements || []).join(', ')}</td>
      <td>${flysheet.typeProduit}</td>
      ${flysheet.pile ? '<td></td>' : `
        <td>
          <div class="goal-wrapper">
            <input type="number" class="editable-goal" value="${flysheet.objectif}" min="1" />
            <div class="progress-bar-container">
              <div class="progress-bar" style="width: ${progress}%; background-color: ${color};"></div>
            </div>
            <span class="goal-display">(${progress}%)</span>
          </div>
        </td>
      `}
      ${flysheet.pile ? '<td></td>' : `
        <td>
          <button class="play-pause-btn ${flysheet.etat ? 'pause' : 'play'}">
            <span class="material-symbols-outlined">${flysheet.etat ? 'pause' : 'play_arrow'}</span>
          </button>
        </td>
      `}
      <td>
        <button class="delete-btn">
          <span class="material-symbols-outlined">cancel</span>
        </button>
      </td>
      <td>
        <button class="download-btn">
          <span class="material-symbols-outlined">download</span>
        </button>
      </td>
    `;

    if (flysheet.pile) {
      tableBody.prepend(row);
    } else {
      tableBody.appendChild(row);
    }
  };

  // init + load
  initLeafletMap(departementCoordsMap);
  loadTable(departementCoordsMap);
});

let leafletMap;
let leafletMarkers = [];

function initLeafletMap() {
  leafletMap = L.map('map', {
    minZoom: 5,
    maxZoom: 8,
    zoomControl: false,
    dragging: true,
    scrollWheelZoom: false,
    doubleClickZoom: false,
    boxZoom: false,
    keyboard: false,
    maxBounds: [
      [41, -5],
      [51.5, 9]
    ],
    maxBoundsViscosity: 1.0
  }).setView([46.6, 2.2], 6);

  L.tileLayer('https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png', {
    attribution: '&copy; OpenStreetMap & Carto',
    subdomains: 'abcd',
    maxZoom: 8
  }).addTo(leafletMap);
}

function updateLeafletMarkers(flysheets, departementCoordsMap) {
  leafletMarkers.forEach(marker => leafletMap.removeLayer(marker));
  leafletMarkers = [];

  const getColorFromName = (name) => {
    const colors = ['#e74c3c', '#3498db', '#2ecc71', '#9b59b6', '#f39c12', '#1abc9c'];
    const hash = [...name].reduce((acc, c) => acc + c.charCodeAt(0), 0);
    return colors[hash % colors.length];
  };

  flysheets.forEach(f => {
    const color = getColorFromName(f.nom?.toLowerCase());
    (f.departements || []).forEach(dep => {
      const coords = departementCoordsMap.get(dep);
      if (!coords) return;
      const [lng, lat] = coords;

      const popupContent = `
        <b>D√©partement ${dep}</b><br />
        <b>Flysheet :</b> ${f.nom}<br />
        <b>Valides :</b> ${f.valide || 0}<br />
        <b>Invalides :</b> ${f.invalide || 0}<br />
        <b>T√©l. :</b> ${f.tel || 0}<br />
        <b>Uniques :</b> ${f.unique || 0}<br />
        <b>Install√©s :</b> ${f.installer || 0}<br />
        <b>Objectif :</b> ${f.objectif || 0}
      `;

      const marker = L.marker([lat, lng], {
        icon: L.divIcon({
          className: 'custom-cross',
          html: `<div style="color:${color}; font-size: 16px; font-weight: bold;">üìç</div>`,
          iconAnchor: [8, 8]
        }),
        interactive: true
      })
        .addTo(leafletMap)
        .bindPopup(popupContent);

      leafletMarkers.push(marker);
    });
  });
}

function loadTable(departementCoordsMap, filters = {}) {
  const tableBody = document.getElementById('flysheetTableBody');
  let url = '/api/campagnes';
  const query = new URLSearchParams(filters).toString();
  if (query) url += `?${query}`;

  fetch(url)
    .then(res => res.json())
    .then(data => {
      if (!data.status || !Array.isArray(data.data)) return;

      const allData = data.data;
      const piles = allData.filter(c => c.pile);
      const others = allData.filter(c => !c.pile);

      tableBody.innerHTML = '';
      [...piles, ...others].forEach(renderFlysheetRow);
      updateLeafletMarkers([...piles, ...others], departementCoordsMap);
    })
    .catch(console.error);
}
